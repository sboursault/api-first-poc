openapi: 3.0.3
info:
  title: Books API
  version: '1.0'
  description: >
    Find recommended novels and add yours.<br/>
    More info <a href="http://google.com">here</a>.

    Also, we can use **markdow** syntax, `fixed elements` or even some formated code:

    <pre>
        curl -X GET \
          http://myserver/hello
    </pre>



    ACME offers a lot of configuration options...
    <div class="alert alert-success" role="alert"><i class="fa fa-info-circle"></i> <b>Tip: </b>See the resources available in the portal for more detail.</div>
    <div class="alert alert-warning" role="alert"><i class="fa fa-info-circle"></i> <b>Note: </b>The  network includes a firewall that protects your access to the resources...</div>

    <div class="container">
    <div class="apiConfigDetails">
    <button type="button" class="btn btn-warning" data-toggle="collapse" data-target="#demo">
    <span class="glyphicon glyphicon-collapse-down"></span> See API Configuration Details
    </button>
    <div id="demo" class="collapse">

    <h2>Identifiers Allowed</h2>

    <p>Based on this configuration, ACME will accept any of the following identifiers in requests.</p>


servers:
  - url: 'http://localhost:8081/v1'
paths:
  /books:
    get:
      description: list of recommended books
      tags:
        - "books"
      #operationId: GET_books
      parameters:
        - name: page
          in: query
          description: the page number to use for pagination
          schema:
            type: integer
      responses:
        200:
          description: 'Ok'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/books.Book'
              examples:
                objectExample:
                  $ref: '#/components/examples/books.BookList'
                  

    post:
      description: register a new book
      tags:
        - "books"
      responses:
        201:
          description: 'Created'
          #content:
          #  application/json:
          #    schema:
          #      title: empty
          #      type: nil
        422:
          description: 'Unprocessable Entity'
          content:
            application/json:
              example:
                message: book.publicationDate must be a number between 0 and 2019
              schema:
                $ref: '#/components/schemas/books.Error'
      #operationId: POST_books
      requestBody:
        content:
          application/json:
            example:
              title: Theft of Swords
              author: Michael J. Sullivan
              series: The Riyria Revelations
              publicationDate: 2011
              genre:
                - Epic fantasy
            schema:
              $ref: '#/components/schemas/books.Book'
        required: true
  '/books/{bookId}':
    get:
      description: get book detail
      #operationId: GET_books-bookId
      tags:
        - "books"
      parameters:
        - name: bookId
          in: path
          required: true
          description: "Book's id (eg. fe6c8d75-1a5d-4d6f-b973-000000000001)"
          schema:
            example: fe6c8d75-1a5d-4d6f-b973-000000000001
            #type: string

      responses:
        200:
          description: ''
          content:
            application/json:
              example:
                title: A Game of Thrones
                author: George R. R. Martin
                series: A Song of Ice and Fire
                publicationDate: 1996
                genre:
                  - Epic fantasy
                links:
                  - rel: start
                    href: 'http://localhost:8080/v1/books'
                  - rel: self
                    href: 'http://localhost:8080/v1/books/fe6c8d75-1a5d-4d6f-b973-000000000001'
              schema:
                $ref: '#/components/schemas/books.Book'
        404:
          description: ''
          content:
            application/json:
              example:
                message: no book found with id 'fe6c8d75-1a5d-4d6f-b973-000000000009'
              schema:
                $ref: '#/components/schemas/books.Error'


components:
  schemas:
    books.Error:
      properties:
        message:
          type: string
      required:
        - message
      type: object
    books.Book:
      properties:
        title:
          minLength: 1
          maxLength: 200
          description: Book's title
          type: string
        author:
          type: string
        series:
          type: string
        publicationDate:
          minimum: 0
          type: integer
        genre:
          uniqueItems: true
          minItems: 1
          type: array
          items:
            type: string
      required:
        - title
        - author
        - genre
      type: object
  responses: {}
  parameters: {}
  examples:  
      books.BookList:
        summary: A sample object
        value:
          links:
            - rel: start
              href: 'http://localhost:8080/v1/books'
          content:
            - title: Foundation
              author: Isaac Asimov
              series: Foundation Series
              publicationDate: 1951
              genre:
                - Science fiction
                - political drama
              links:
                - rel: self
                  href: 'http://localhost:8080/v1/books/fe6c8d75-1a5d-4d6f-b973-000000000000'
            - title: Harry Potter and the Deathly Hallows
              author: J. K. Rowling
              series: Harry Potter
              publicationDate: 2009
              genre:
                - Fantasy
              links:
                - rel: self
                  href: 'http://localhost:8080/v1/books/fe6c8d75-1a5d-4d6f-b973-000000000002'
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
